============== Day 01 ====================
知识回顾
	spring
	mvc
	maven
		读取 pom 寻找相应的 jar
		远程中央库、本地中央库
spring boot简介
	整合了主流的第三方框架，形成的一套快速开发的框架；
	特性
		快速开发；
		pom：以starter形式，按组类聚了多条jar，形成的单条依赖、通过父子继承的方式，方便进行版本管理；
		“习惯优于配置”理念，简化配置，没有 web.xml
		bean注入；全注解的方式引入开发；
		内嵌 servlet 容器，无需外置
		方便我们监控
	mvc、boot、cloud
		mvc：web框架；
		boot：垂直的框架、集成者；
		cloud：分布式框架，boot + cloud = 分布式的开发；
	why
		配置、开发、部署简单
常用的注解
	@SpringBootApplication ---- 启动类
	@Configuration ---- 相当于 <beans></beans>
	@Bean ---- <bean></bean>
	@Component ---- 注册为 spring 组件
	@Value ---- 读取配置文件的值
	@Aspect ---- aop
		@Pointcut、@Before……
	@WebFilter ---- 过滤器
	@Controller 、@RestController
		@RequestMapping ---- 指定请求相关信息
		@PostMapping ---- 指定 post 请求
			consumes ---- 进入控制器的数据类型
				apllication/json --- json
				application/x-www-form-urlencoded ---- form
		参数注解
			@PathVariable --- 获取 path 路劲参数
			@RequestParam ---- 获取Url后面的查询参数
			@RequestBody ---- 接收 json 数据
			@ModelAttribute ---- 接收我们 form 表单数据
		
		@RequestBody、@PathVariable、@RequestMapping、@PostMapping、@responsebody
	@Service
	@Mapper
	@Autowired、@Resource
搭建0配置boot框架
提供第一个接口，返回描述信息
运行的方式
	main方法
	java命令的方式：jar、war
	部署到外置的容器运行
		1、内置 tomcat jar 和外置 tomcat jar 冲突的问题 ---- 手动引入 spring-boot-starter-tomcat，并指定 scope 为 provided；
		2、无 web.xml 的问题 ---- 启动类继承 SpringBootServletInitializer， 重写 configure 方法，将启动类加入到 servlet 配置源中；
	
Git
	GitHub： https://github.com/hymanHu/200301.git
	命令
		git clone https://github.com/hymanHu/200301.git
		git checkout -b dev -t origin/master ---- 从 master 分支创建 dev 分支
		git push origin HEAD ---- 将本地创建的 dev 分支，push 到远程
		
		git add README.md ---- 将修改或新增内容添加到提交序列
		git commit -m "test" ---- 将提交序列内容 commit 到本地代码仓库
		git push origin master ---- 将本地仓库的变更 push 到远程仓库
		
		1、将远程代码仓库 clone 到本地；
		2、在代码仓库创建代码；
		3、add 将新增代码 添加到 提交序列
		4、commit 将提交序列 commit 到本地仓库， -m ""
		5、push 将本地仓库 push 到远程；
		
		git branch -a
		Git status
		
作业
	1、创建 spring boot 项目，提供第一个接口；
	2、war部署到外置的tomcat，如何运行；
	3、创建 GitHub 帐号和远程代码仓库，并将本地代码提交到远程代码仓库；
	
============== Day 02 ====================
配置文件
	全局：application.properties || application.yml
	优先级
		相同位置：properties >  yml
		不同位置
			外置
				和 jar 平级的 config 目录
				和 jar 平级
			内置
				src\main\resources\config
				src\main\resources
	读取
		全局配置文件
			直接使用 @Value 注解读取
		非全局性配置文件
			注册为组件
			绑定配置文件
			使用 @Value 注解 || @ConfigurationProperties(prefix = "com.test")

Logback
	步骤一：引入 jar；
		已经引入，无需书写 pom；
	步骤二：配置；
		log配置文件
		application.xml 指定 log 配置文件；
	步骤三：应用；
		在需要输出的地方按照不同级别打印日志；

多环境配置
	步骤一：引入 jar；
		无需修改 pom；
	步骤二：配置；
		定义不同环境的配置文件，将不同的配置书写到对应的环境配置文件中
			格式：application-{profile}.properties
				application-dev.properties
				application-live.properties
		全局配置文件，指定环境
			spring.profiles.active=dev
	步骤三：应用；
	
热部署配置
	步骤一：引入 jar；
		<!-- spring dev tools -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
	步骤二：配置；
		# for dev tools
		spring.devtools.restart.enabled=true
		spring.devtools.restart.additional-paths=src/main/java
	步骤三：应用；
		修改 java 代码，自动重启项目；
		
http&https
	简介
		http：超文本的传输协议，80，明文传输、不安全；
		https：安全的超文本传输协议，443，加密传输；
		SSL：
			CA证书中心，签发三种证书，普通、企业、增强型
			自己生成；keytool -genkey -alias tomcat -keyalg RSA
	步骤一：引入 jar；
		无需引入；
	步骤二：配置；
		将.keystore放置到 classpath 下
		全局配置
			# for ssl
			server.ssl.key-store=classpath:.keystore
			server.ssl.key-store-password=111111
		配置类
			为 HTTP 添加连接器，并将连接器加入 servlet 容器里面
	步骤三：应用；
	
作业
	1、完成 /test/config 接口，读取配置文件内容；
	2、完成 /test/log 接口；
	3、引入 dev、live多环境配置；
	4、引入热部署配置；
	5、引入 HTTP & https
	
============== Day 03 ====================
数据库
	sql 数据库：mysql、sql server、Oracle
	内存数据库：redis、memercach
	文件型数据库：mogodb
orm框架
	mybatis、hibernate、jpa
引入mybatis
	步骤一：引入jar
		mysql（注意版本）、连接池、mybatis、分页
	步骤二：配置
		全局配置
			# for data source
			# mysql 5
			spring.datasource.driver-class-name=com.mysql.jdbc.Driver
			# mysql 6 +
			#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
			spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8
			spring.datasource.username=root
			spring.datasource.password=root
			
			# hikari pool
			# 连接池最大连接数，默认是10
			spring.datasource.hikari.maximum-pool-size=20
			# 最小空闲连接数量
			spring.datasource.hikari.minimum-idle=5
			# 空闲连接存活最大时间，默认600000（10分钟）
			spring.datasource.hikari.idle-timeout=180000
			spring.datasource.hikari.auto-commit=true
			
			# for mybatis
			# 开启驼峰法
			mybatis.configuration.map-underscore-to-camel-case=true
			# 如果有单独的 Mybatis 配置文件，指定路径
			#mybatis.config-locations=classpath:config/SqlMapConfig.xml
			# mybatis 的 xml 文件中需要写类的全路径名，较繁琐，可以配置自动扫描包路径
			#mybatis.type-aliases-package=com.thornBird.sbd.modules.*.entity
			# 如果有 *Mapper.xml 文件，配置路径
			#mybatis.mapper-locations=classpath:mapper/*Mapper.xml
	步骤三：应用
		准备sql
		书写实体 bean
		dao --- service ---- controller ---- 接口测试
基本查询接口
	需求
		根据 countryId 查询所有的城市列表 ---- 纯注解方式、*Mapper.xml 实现
		根据 cityName、localCityName 查询 city
		
	restful 命名规则
		实体bean名词命令路径，单数用单数、复数用复数
		id放到path路径
		查询参数，使用问号加key、value形式
		多个查询参数，使用一个vo对象包装查询参数
		路劲一致的情况，通过type类型区别
		/api
		
组合查询接口
	需求
		根据 countryId 查询 country 对象
		根据 countryName 查询 country 对象
	问题
		Statement returned more than one row, where no more than one was expected.
		List导包错误
	
分页查询
	需求
		将 countryId 查询到的 cities 进行分页；
		
多条件查询
	需求
		给定多个查询参数，查询List<City>，返回分页数据
		
作业
	getCitiesByCountryId 接口
	getCityByName 接口
	getCitiesByPage 接口
	getCountryByCountryId 接口
	getCountryByCountryName 接口
	getCitiesBySearchVo 接口
	
============== Day 04 ====================
增加接口
	需要一个 result 对象
	需求：提供一个新增 city 的接口
修改接口
	需求：提供一个修改 city 对象的接口
删除接口
	需求，根据 cityId 删除对应的数据
	
事务

引入 jpa
	步骤一：引入 jar；
		<!-- jpa -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
	步骤二：配置；
		# for jpa
		#validate：加载时，验证创建数据库表结构；
		#create：每次加载重新创建数据库表结构；
		#create-drop：加载时创建，退出是删除表结构；
		#update：加载时动态变更表结构，不影响数据；
		# 动态生成表策略
		spring.jpa.hibernate.ddl-auto=update
		# 命名规则策略，默认：驼峰-下划线，下面配置：驼峰-驼峰
		#spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
		# 指定数据库表的引擎为InnoDB，支持事务
		spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
		spring.jpa.show-sql=true
		spring.jpa.properties.hibernate.format_sql=true
		# hibernateLazyInitializer 异常解决方案
		spring.jackson.serialization.fail-on-empty-beans=false
		# 控制台打印sql
		logging.level.org.hibernate.SQL=DEBUG
		logging.level.org.hibernate.type.descriptor.sql.BasicBinder=trace
	步骤三：应用；
	
自动生成表功能
	重写 hibernate core 包里面的 PropertyContainer 类，将 TreeMap 变成 LinkedHashMap；
	
redis
	步骤一：引入 jar；
		<!-- redis -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
		<!-- 缓存连接池依赖 jar -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-pool2</artifactId>
		</dependency>
	步骤二：配置；
		application.properties
			# for Redis
			spring.redis.database=0
			spring.redis.host=127.0.0.1
			spring.redis.port=6379
			spring.redis.password=111111
			spring.redis.timeout=300

			# for Lettuce
			spring.redis.lettuce.pool.max-active=8
			spring.redis.lettuce.pool.max-wait=10000
			spring.redis.lettuce.pool.max-idle=8
			spring.redis.lettuce.pool.min-idle=0
			spring.redis.lettuce.shutdown-timeout=100
		RedisConfig.java
			重写 redisTemplate：阅读 RedisAutoConfiguration.java 源码，该配置类中为我们配置了 RedisTemplate<Object, Object> 和 StringRedisTemplate 两个bean，其中 RedisTemplate 泛型是两个 Object，对我们来说操作并不方便，会有类型转换的代码，RedisTemplate<String, Object> 更满足我们的需求，@ConditionalOnMissingBean(name = "redisTemplate") 注解也方便我们自定义 redisTemplate 来替换该 bean；
			定义 key-value 序列化方式：RedisTemplate 中 defaultSerializer 为 JdkSerializationRedisSerializer，并不方便数据传递，key 采用 stringSerializer，value 采用 jacksonSerializer 的方式更符合我们的需求，所以，我们需要重新定义 key-value 的序列化方式；
			重新定义 CacheManager，因为我们改变了 value 的序列化方式，CacheManager 也需要重新定义；
			重新定义缓存 key 的生成策略；
		
	步骤三：应用；
		1、工具类的包装；
		需求： 通过 countryId 从 mysql 查询城市列表，将城市列表放入 redis 数据库，并读取出来，以接口形式返回；
		


作业
	insetCity 接口
	updateCity 接口
	deleteCity 接口
	migrateCitiesByCountryId 接口
	----------
	user、role、resource 三个实体 bean 的增删改查接口 ---- 该作业持续几天完成
	
============== Day 05 ====================
thymeleaf
	步骤一：pom
		<!-- thymeleaf -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
	步骤二：配置
		spring.thymeleaf.cache=false
		spring.thymeleaf.enabled=true
		spring.thymeleaf.encoding=UTF-8
		spring.thymeleaf.mode=HTML5
		spring.thymeleaf.prefix=classpath:/templates/
		spring.thymeleaf.suffix=.html
	步骤三：应用
		创建页面，控制器返回页面
		
模块化、碎片化
thymeleaf页面数据处理
过滤器
	url匹配规则
		/* ---- /test1 /test
		/** ---- /test/desc
	步骤一：无需导入 jar；
	步骤二：配置
		ParameterFilter
			实现 Filter 接口，添加 WebFilter 注解
			重写 doFilter 方法，注意，须调用 chain.doFilter 方法，将处理过的 request、response 对象交出去；
			参数的获取方式：@Requestparam 的方式获取、request.getParameter的方式获取，我们需要重写两个方法
		WebMvcConfig 注册类
			注册了一个叫 FilterRegistrationBean bean，该 bean 添加上自定义 filter；
拦截器
	需求：url 拦截器
		path： /test/index
		template：test/index
	步骤一：导入 jsr ---- 无需额外导入
	步骤二：配置
		UrlInteceptor 实现 HandlerInterceptor，重写 pre、post、after 三个方法；
		注册拦截器，注册类 WebMvcConfig 需要实现 WebMvcConfigurer 接口，实现 addInterceptors 方法，将自定义的拦截器注册到 InterceptorRegistry
	步骤三：引用
		书写拦截器业务逻辑；
		
作业
	引入 thymeleaf，实现页面碎片化，完成碎片组装器、test模块下的index页面；
	过滤器
	拦截器
	user、role、resource 三张表接口 ---- 长期作业
	
============== Day 06 ====================
aop
	步骤一：无需引入 jar
	步骤二：配置
		书写切面类
			指定“一个或多个 pointCut”
			指定通知方式，每个方法和一个 pointcut 绑定
	步骤三：应用
		书写具体的业务逻辑
文件上传
	步骤一：无需引入额外 jar
	步骤二：配置
		上传文件的大小
	步骤三：应用
		页面书写上传文件form，指定 mutipart/form-data
		控制器，指定的consumer类型和页面一致，使用 MutipartFile 来接收文件，使用transferTo来保存文件、使用redirect进行请求转发，使用redirectAttribute来进行参数传递；

配置资源文件
	将本地文件夹映射为spring 系统中的一个 resourcePath，可以用该 resourcePath 来定位本地资源；
	
下载文件
	步骤一：无需引入jar；
	步骤二：配置
	步骤三：应用
		设置响应头信息
			application/octet-stream
			attachment; filename=npp.7.8.7.Installer.exe
		使用 responseEntity下载

端点监控
	步骤一：
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
	步骤二：配置
		# for actuator
		management.endpoints.web.exposure.include=*
	步骤三：应用
		http://127.0.0.1/actuator
	
作业
	aop
	文件上传下载
	配置资源文件
	开启端点
	
============== Day 07 ====================
项目开发流程
敏捷开发&Scrum
	https://blog.csdn.net/sinat_40770656/article/details/95058150
寻找前端模版
拆解前端模版
	
作业
	拆解前端模版，完成碎片组装器；
	----------
	user、role、resource 三个实体 bean 的增删改查接口 ---- 该作业持续几天完成
	
	
	
	
	
		